Name: Anubhavnidhi Abhashkumar
CSL-ID: anubhavnidhi
Name: Rasiga Gowrisankar
CSL-ID: rasiga
Implementation Details:
1) clone() - malloc is used to allocate space for the thread's stack. This address is passed to the clone function which copies the argument and the fake return address into that stack. The allocated space for stack is page aligned and we made sure that the stack grows backwards. In order to make the thread execute the function, we change the eip pointer to the function pointer. The newly created thread has the current process as its parent. 
2) join() - Similar to wait function. If the pid is -1, we wait for ANY of the child threads, otherwise, wait for the particular child thread. 
3) changes made to wait() and exit() - We made sure that a process does not wait on a child thread. We have also freed the address space accordingly.
In exit(), if proc is a thread then we just change its state to ZOMBIE and continue. If proc is a process then we kill all of its children threads and wait for them to exit (ie, go to sleep until the child thread's state changes to ZOMBIE).4)thread_create function accepts a function pointer and arg - Here we allocate a heap address for the stack and pass it to clone function.
5) thread_join() takes the pid as argument and calls join() and frees the user stack. 
6) Locks - functions such as init(), acquire() and release() have been implemented to add support for locks. The lock is implemented as a ticket lock. A fetchandadd fucntion has been added to increment the turn and ticket variables atomically. 
7) Conditional Variables - For cases that need to wait until a condition is satisfied/ wakeup a process after a particular job is done, CV support is added. A new structure cond_t has been implemented that has a init variable and a queue that keeps track of all the processes that are waiting on a CV. 

